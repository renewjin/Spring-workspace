spring.application.name=AjaxDupCheck


# application.properties 에는 name만 작성하고 
# config.properties 파일을 생성해서 이 파일에 아래 정보를 모두 작성

#web 사이트 들어갈 번호
server.port = 9050

#Orcle db연결 문 작성
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
#DB에서 아이디와 비밀번호를 대문자로 작성했다면 마찬가지로 모두 대문자로 입력
spring.datasource.username=KH_WORKBOOK1
spring.datasource.password=KH1234

mybatis.mapper-locations=classpath:/mappers/*.xml
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.mybatis.spring=DEBUG

mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#Thymeleaf 템플릿 엔진을 사용하지 않기 때문에 html 파일 위치를 바라보는 설정값 작성
# 파일이 저장된 위치 경로를 설정
## /** 설정하면 모든 경로에 있는 경로들을 가져와서 경로 패턴을 확보
### static 밑에 만드는 /image/ 이미지 폴더 밑에 이미지들이나
### static 밑에 만드는 /css/   css 폴더 밑에 css 파일들이나
### static 밑에 만드는 /js/    js  폴더 밑에 js 파일들이나
### static 밑에 만드는 /html/  html 폴더 밑에 만드는 html 파일등 모든 파일들의 경로를 확인하겠다는 의미
spring.mvc.static-path-pattern=/**

# static 폴더 밑에 파일을 java에서 사용할 수 있음
spring.web.resources.static-locations=classpath:/static/


# 간단하게 주소설정을 해결하는 방법
# 1. 템플릿엔진을 이용 Thymeleaf 템플릿 을 체크해서 설정
# 2. groovy 템플릿엔진을 이용
# 3. mustache 템플릿 엔진을 이용 : html 문서를 출력하기 위해 추가로 설정을 해줘야 함
## -> 만약에 설정을 해준다면 
## prefix (어느폴더에서 시작하는가 ?) suffix (어느확장자명으로 종료하는가 ?)

# 템플릿 엔진의 경우 react를 build 하기 전까지 사용할 필요가 없지만
# react를 build해서 사용할 경우 필요하기 때문에 처음부터 설정해주는 것이 좋음

# 템플릿 엔진이 존재하지 않는다면 config 파일을 작성해서 설정